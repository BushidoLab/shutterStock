{"ast":null,"code":"import _classCallCheck from \"/home/diego/Documents/ethereum/shutterStock/shutter_stock/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/diego/Documents/ethereum/shutterStock/shutter_stock/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/diego/Documents/ethereum/shutterStock/shutter_stock/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/diego/Documents/ethereum/shutterStock/shutter_stock/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/diego/Documents/ethereum/shutterStock/shutter_stock/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/diego/Documents/ethereum/shutterStock/shutter_stock/src/components/PhotosUploader.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport request from 'superagent';\nimport Dropzone from 'react-dropzone';\nimport { photosUploaded, updateUploadedPhoto } from '../actions';\nimport UploadedPhotoStatusContainer from './UploadedPhotosStatus';\n\nvar PhotosUploader =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PhotosUploader, _Component);\n\n  function PhotosUploader(props, context) {\n    var _this;\n\n    _classCallCheck(this, PhotosUploader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PhotosUploader).call(this, props, context));\n    _this.state = {\n      uploadedPhotos: []\n    };\n    _this.photoId = 1;\n    return _this;\n  }\n\n  _createClass(PhotosUploader, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(Dropzone, {\n        id: \"direct-upload-dropzone\",\n        disableClick: true,\n        multiple: false,\n        accept: \"image/*\",\n        style: {\n          position: 'relative'\n        },\n        onDrop: this.onPhotoSelected.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"direct_upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"New Photo\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"Direct upload from the browser with React File Upload\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"You can also drag and drop an image file into the dashed area.\"), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"form_line\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        path: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Title:\"), React.createElement(\"div\", {\n        class: \"form_controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        ref: function ref(titleEl) {\n          return _this2.titleEl = titleEl;\n        },\n        class: \"form-control\",\n        placeholder: \"Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        class: \"form_line\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Image:\"), React.createElement(\"div\", {\n        class: \"form_controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"upload_button_holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        class: \"upload_button\",\n        for: \"fileupload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Upload\"), React.createElement(\"input\", {\n        type: \"file\",\n        id: \"fileupload\",\n        accept: \"image/*\",\n        multiple: \"multiple\",\n        ref: function ref(fileInputEl) {\n          return _this2.fileInputEl = fileInputEl;\n        },\n        onChange: function onChange() {\n          return _this2.onPhotoSelected(_this2.fileInputEl.files);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }))))), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Status\")), this.props.uploadedPhotos.map(function (uploadedPhoto) {\n        return React.createElement(UploadedPhotoStatusContainer, {\n          key: uploadedPhoto.public_id,\n          uploadedPhoto: uploadedPhoto,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        });\n      })), React.createElement(NavLink, {\n        className: \"back_link\",\n        exact: true,\n        to: \"/photos\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Back to list\"));\n    }\n  }, {\n    key: \"onPhotoSelected\",\n    value: function onPhotoSelected(files) {\n      var _this3 = this;\n\n      var url = \"https://api.cloudinary.com/v1_1/\".concat(this.context.cloudName, \"/upload\");\n      var title = this.titleEl.value;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var file = _step.value;\n          var photoId = _this3.photoId++;\n          var fileName = file.name;\n          request.post(url).field('upload_preset', _this3.context.uploadPreset).field('file', file).field('multiple', true).field('tags', title ? \"myphotoalbum,\".concat(title) : 'myphotoalbum').field('context', title ? \"photo=\".concat(title) : '').on('progress', function (progress) {\n            return _this3.onPhotoUploadProgress(photoId, file.name, progress);\n          }).end(function (error, response) {\n            _this3.onPhotoUploaded(photoId, fileName, response);\n          });\n        };\n\n        for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"onPhotoUploadProgress\",\n    value: function onPhotoUploadProgress(id, fileName, progress) {\n      this.props.onUpdateUploadedPhoto({\n        id: id,\n        fileName: fileName,\n        progress: progress\n      });\n    }\n  }, {\n    key: \"onPhotoUploaded\",\n    value: function onPhotoUploaded(id, fileName, response) {\n      this.props.onUpdateUploadedPhoto({\n        id: id,\n        fileName: fileName,\n        response: response\n      });\n      this.props.onPhotosUploaded([response.body]);\n    }\n  }]);\n\n  return PhotosUploader;\n}(Component);\n\nPhotosUploader.propTypes = {\n  uploadedPhotos: PropTypes.array,\n  onUpdateUploadedPhoto: PropTypes.func,\n  onPhotosUploaded: PropTypes.func\n};\nPhotosUploader.contextTypes = {\n  cloudName: PropTypes.string,\n  uploadPreset: PropTypes.string\n};\nvar PhotosUploaderContainer = connect(function (state) {\n  return state;\n}, {\n  onUpdateUploadedPhoto: updateUploadedPhoto,\n  onPhotosUploaded: photosUploaded\n})(PhotosUploader);\nObject.assign(PhotosUploaderContainer.contextTypes, PhotosUploader.contextTypes);\nexport default PhotosUploaderContainer;","map":{"version":3,"sources":["/home/diego/Documents/ethereum/shutterStock/shutter_stock/src/components/PhotosUploader.js"],"names":["React","Component","PropTypes","NavLink","connect","request","Dropzone","photosUploaded","updateUploadedPhoto","UploadedPhotoStatusContainer","PhotosUploader","props","context","state","uploadedPhotos","photoId","position","onPhotoSelected","bind","titleEl","fileInputEl","files","map","uploadedPhoto","public_id","url","cloudName","title","value","file","fileName","name","post","field","uploadPreset","on","progress","onPhotoUploadProgress","end","error","response","onPhotoUploaded","id","onUpdateUploadedPhoto","onPhotosUploaded","body","propTypes","array","func","contextTypes","string","PhotosUploaderContainer","Object","assign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport request from 'superagent';\nimport Dropzone from 'react-dropzone';\nimport { photosUploaded, updateUploadedPhoto } from '../actions';\nimport UploadedPhotoStatusContainer from './UploadedPhotosStatus';\n\nclass PhotosUploader extends Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = { uploadedPhotos: [] };\n        this.photoId = 1;\n    }\n\n    render() {\n        return (\n            <div>\n                <Dropzone\n                    id=\"direct-upload-dropzone\"\n                    disableClick={true}\n                    multiple={false}\n                    accept=\"image/*\"\n                    style={{ position: 'relative' }}\n                    onDrop={this.onPhotoSelected.bind(this)}\n                >\n                    <div id=\"direct_upload\">\n                        <h1>New Photo</h1>\n                        <h2>\n                            Direct upload from the browser with React File\n                            Upload\n                        </h2>\n                        <p>\n                            You can also drag and drop an image file into the\n                            dashed area.\n                        </p>\n                        <form>\n                            <div class=\"form_line\">\n                                <label path=\"title\">Title:</label>\n                                <div class=\"form_controls\">\n                                    <input\n                                        type=\"text\"\n                                        ref={titleEl =>\n                                            (this.titleEl = titleEl)\n                                        }\n                                        class=\"form-control\"\n                                        placeholder=\"Title\"\n                                    />\n                                </div>\n                            </div>\n                            <div class=\"form_line\">\n                                <label>Image:</label>\n                                <div class=\"form_controls\">\n                                    <div class=\"upload_button_holder\">\n                                        <label\n                                            class=\"upload_button\"\n                                            for=\"fileupload\"\n                                        >\n                                            Upload\n                                        </label>\n                                        <input\n                                            type=\"file\"\n                                            id=\"fileupload\"\n                                            accept=\"image/*\"\n                                            multiple=\"multiple\"\n                                            ref={fileInputEl =>\n                                                (this.fileInputEl = fileInputEl)\n                                            }\n                                            onChange={() =>\n                                                this.onPhotoSelected(\n                                                    this.fileInputEl.files\n                                                )\n                                            }\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                        <h2>Status</h2>\n                    </div>\n                    {this.props.uploadedPhotos.map(uploadedPhoto => {\n                        return (\n                            <UploadedPhotoStatusContainer\n                                key={uploadedPhoto.public_id}\n                                uploadedPhoto={uploadedPhoto}\n                            />\n                        );\n                    })}\n                </Dropzone>\n\n                <NavLink className=\"back_link\" exact to=\"/photos\">\n                    Back to list\n                </NavLink>\n            </div>\n        );\n    }\n\n    onPhotoSelected(files) {\n        const url = `https://api.cloudinary.com/v1_1/${\n            this.context.cloudName\n        }/upload`;\n        const title = this.titleEl.value;\n\n        for (let file of files) {\n            const photoId = this.photoId++;\n            const fileName = file.name;\n            request.post(url)\n                .field('upload_preset', this.context.uploadPreset)\n                .field('file', file)\n                .field('multiple', true)\n                .field('tags', title ? `myphotoalbum,${title}` : 'myphotoalbum')\n                .field('context', title ? `photo=${title}` : '')\n                .on('progress', (progress) => this.onPhotoUploadProgress(photoId, file.name, progress))\n                .end((error, response) => {\n                    this.onPhotoUploaded(photoId, fileName, response);\n                });\n        }\n    }\n\n    onPhotoUploadProgress(id, fileName, progress) {\n        this.props.onUpdateUploadedPhoto({\n            id: id,\n            fileName: fileName,\n            progress: progress,\n        });\n    }\n\n    onPhotoUploaded(id, fileName, response) {\n        this.props.onUpdateUploadedPhoto({\n            id: id,\n            fileName: fileName,\n            response: response,\n        });\n\n        this.props.onPhotosUploaded([response.body]);\n    }\n}\n\nPhotosUploader.propTypes = {\n    uploadedPhotos: PropTypes.array,\n    onUpdateUploadedPhoto: PropTypes.func,\n    onPhotosUploaded: PropTypes.func,\n};\n\nPhotosUploader.contextTypes = {\n    cloudName: PropTypes.string,\n    uploadPreset: PropTypes.string,\n};\n\nconst PhotosUploaderContainer = connect(\n    state => state,\n    {\n        onUpdateUploadedPhoto: updateUploadedPhoto,\n        onPhotosUploaded: photosUploaded,\n    }\n)(PhotosUploader);\n\nObject.assign(\n    PhotosUploaderContainer.contextTypes,\n    PhotosUploader.contextTypes\n);\n\nexport default PhotosUploaderContainer;"]},"metadata":{},"sourceType":"module"}