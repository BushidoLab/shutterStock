{"ast":null,"code":"// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import { NavLink } from 'react-router-dom';\n// import { connect } from 'react-redux';\n// import request from 'superagent';\n// import Dropzone from 'react-dropzone';\n// import { photosUploaded, updateUploadedPhoto } from '../actions';\n// import UploadedPhotoStatusContainer from './UploadedPhotosStatus';\n// class PhotosUploader extends Component {\n//     constructor(props, context) {\n//         super(props, context);\n//         this.state = { uploadedPhotos: [] };\n//         this.photoId = 1;\n//     }\n//     render() {\n//         return (\n//             <div>\n//                 <Dropzone\n//                     id=\"direct-upload-dropzone\"\n//                     disableClick={true}\n//                     multiple={false}\n//                     accept=\"image/*\"\n//                     style={{ position: 'relative' }}\n//                     onDrop={this.onPhotoSelected.bind(this)}\n//                 >\n//                     <div id=\"direct_upload\">\n//                         <h1>New Photo</h1>\n//                         <h2>\n//                             Direct upload from the browser with React File\n//                             Upload\n//                         </h2>\n//                         <p>\n//                             You can also drag and drop an image file into the\n//                             dashed area.\n//                         </p>\n//                         <form>\n//                             <div class=\"form_line\">\n//                                 <label path=\"title\">Title:</label>\n//                                 <div class=\"form_controls\">\n//                                     <input\n//                                         type=\"text\"\n//                                         ref={titleEl =>\n//                                             (this.titleEl = titleEl)\n//                                         }\n//                                         class=\"form-control\"\n//                                         placeholder=\"Title\"\n//                                     />\n//                                 </div>\n//                             </div>\n//                             <div class=\"form_line\">\n//                                 <label>Image:</label>\n//                                 <div class=\"form_controls\">\n//                                     <div class=\"upload_button_holder\">\n//                                         <label\n//                                             class=\"upload_button\"\n//                                             for=\"fileupload\"\n//                                         >\n//                                             Upload\n//                                         </label>\n//                                         <input\n//                                             type=\"file\"\n//                                             id=\"fileupload\"\n//                                             accept=\"image/*\"\n//                                             multiple=\"multiple\"\n//                                             ref={fileInputEl =>\n//                                                 (this.fileInputEl = fileInputEl)\n//                                             }\n//                                             onChange={() =>\n//                                                 this.onPhotoSelected(\n//                                                     this.fileInputEl.files\n//                                                 )\n//                                             }\n//                                         />\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                         </form>\n//                         <h2>Status</h2>\n//                     </div>\n//                     {this.props.uploadedPhotos.map(uploadedPhoto => {\n//                         return (\n//                             <UploadedPhotoStatusContainer\n//                                 key={uploadedPhoto.public_id}\n//                                 uploadedPhoto={uploadedPhoto}\n//                             />\n//                         );\n//                     })}\n//                 </Dropzone>\n//                 <NavLink className=\"back_link\" exact to=\"/photos\">\n//                     Back to list\n//                 </NavLink>\n//             </div>\n//         );\n//     }\n//     onPhotoSelected(files) {\n//         const url = `https://api.cloudinary.com/v1_1/${\n//             this.context.cloudName\n//         }/upload`;\n//         const title = this.titleEl.value;\n//         for (let file of files) {\n//             const photoId = this.photoId++;\n//             const fileName = file.name;\n//             request.post(url)\n//                 .field('upload_preset', this.context.uploadPreset)\n//                 .field('file', file)\n//                 .field('multiple', true)\n//                 .field('tags', title ? `myphotoalbum,${title}` : 'myphotoalbum')\n//                 .field('context', title ? `photo=${title}` : '')\n//                 .on('progress', (progress) => this.onPhotoUploadProgress(photoId, file.name, progress))\n//                 .end((error, response) => {\n//                     this.onPhotoUploaded(photoId, fileName, response);\n//                 });\n//         }\n//     }\n//     onPhotoUploadProgress(id, fileName, progress) {\n//         this.props.onUpdateUploadedPhoto({\n//             id: id,\n//             fileName: fileName,\n//             progress: progress,\n//         });\n//     }\n//     onPhotoUploaded(id, fileName, response) {\n//         this.props.onUpdateUploadedPhoto({\n//             id: id,\n//             fileName: fileName,\n//             response: response,\n//         });\n//         this.props.onPhotosUploaded([response.body]);\n//     }\n// }\n// PhotosUploader.propTypes = {\n//     uploadedPhotos: PropTypes.array,\n//     onUpdateUploadedPhoto: PropTypes.func,\n//     onPhotosUploaded: PropTypes.func,\n// };\n// PhotosUploader.contextTypes = {\n//     cloudName: PropTypes.string,\n//     uploadPreset: PropTypes.string,\n// };\n// const PhotosUploaderContainer = connect(\n//     state => state,\n//     {\n//         onUpdateUploadedPhoto: updateUploadedPhoto,\n//         onPhotosUploaded: photosUploaded,\n//     }\n// )(PhotosUploader);\n// Object.assign(\n//     PhotosUploaderContainer.contextTypes,\n//     PhotosUploader.contextTypes\n// );\n// export default PhotosUploaderContainer;","map":{"version":3,"sources":["/home/diego/Documents/ethereum/shutterStock/shutter_stock/src/components/PhotosUploader.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import { NavLink } from 'react-router-dom';\n// import { connect } from 'react-redux';\n// import request from 'superagent';\n// import Dropzone from 'react-dropzone';\n// import { photosUploaded, updateUploadedPhoto } from '../actions';\n// import UploadedPhotoStatusContainer from './UploadedPhotosStatus';\n\n// class PhotosUploader extends Component {\n//     constructor(props, context) {\n//         super(props, context);\n//         this.state = { uploadedPhotos: [] };\n//         this.photoId = 1;\n//     }\n\n//     render() {\n//         return (\n//             <div>\n//                 <Dropzone\n//                     id=\"direct-upload-dropzone\"\n//                     disableClick={true}\n//                     multiple={false}\n//                     accept=\"image/*\"\n//                     style={{ position: 'relative' }}\n//                     onDrop={this.onPhotoSelected.bind(this)}\n//                 >\n//                     <div id=\"direct_upload\">\n//                         <h1>New Photo</h1>\n//                         <h2>\n//                             Direct upload from the browser with React File\n//                             Upload\n//                         </h2>\n//                         <p>\n//                             You can also drag and drop an image file into the\n//                             dashed area.\n//                         </p>\n//                         <form>\n//                             <div class=\"form_line\">\n//                                 <label path=\"title\">Title:</label>\n//                                 <div class=\"form_controls\">\n//                                     <input\n//                                         type=\"text\"\n//                                         ref={titleEl =>\n//                                             (this.titleEl = titleEl)\n//                                         }\n//                                         class=\"form-control\"\n//                                         placeholder=\"Title\"\n//                                     />\n//                                 </div>\n//                             </div>\n//                             <div class=\"form_line\">\n//                                 <label>Image:</label>\n//                                 <div class=\"form_controls\">\n//                                     <div class=\"upload_button_holder\">\n//                                         <label\n//                                             class=\"upload_button\"\n//                                             for=\"fileupload\"\n//                                         >\n//                                             Upload\n//                                         </label>\n//                                         <input\n//                                             type=\"file\"\n//                                             id=\"fileupload\"\n//                                             accept=\"image/*\"\n//                                             multiple=\"multiple\"\n//                                             ref={fileInputEl =>\n//                                                 (this.fileInputEl = fileInputEl)\n//                                             }\n//                                             onChange={() =>\n//                                                 this.onPhotoSelected(\n//                                                     this.fileInputEl.files\n//                                                 )\n//                                             }\n//                                         />\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                         </form>\n//                         <h2>Status</h2>\n//                     </div>\n//                     {this.props.uploadedPhotos.map(uploadedPhoto => {\n//                         return (\n//                             <UploadedPhotoStatusContainer\n//                                 key={uploadedPhoto.public_id}\n//                                 uploadedPhoto={uploadedPhoto}\n//                             />\n//                         );\n//                     })}\n//                 </Dropzone>\n\n//                 <NavLink className=\"back_link\" exact to=\"/photos\">\n//                     Back to list\n//                 </NavLink>\n//             </div>\n//         );\n//     }\n\n//     onPhotoSelected(files) {\n//         const url = `https://api.cloudinary.com/v1_1/${\n//             this.context.cloudName\n//         }/upload`;\n//         const title = this.titleEl.value;\n\n//         for (let file of files) {\n//             const photoId = this.photoId++;\n//             const fileName = file.name;\n//             request.post(url)\n//                 .field('upload_preset', this.context.uploadPreset)\n//                 .field('file', file)\n//                 .field('multiple', true)\n//                 .field('tags', title ? `myphotoalbum,${title}` : 'myphotoalbum')\n//                 .field('context', title ? `photo=${title}` : '')\n//                 .on('progress', (progress) => this.onPhotoUploadProgress(photoId, file.name, progress))\n//                 .end((error, response) => {\n//                     this.onPhotoUploaded(photoId, fileName, response);\n//                 });\n//         }\n//     }\n\n//     onPhotoUploadProgress(id, fileName, progress) {\n//         this.props.onUpdateUploadedPhoto({\n//             id: id,\n//             fileName: fileName,\n//             progress: progress,\n//         });\n//     }\n\n//     onPhotoUploaded(id, fileName, response) {\n//         this.props.onUpdateUploadedPhoto({\n//             id: id,\n//             fileName: fileName,\n//             response: response,\n//         });\n\n//         this.props.onPhotosUploaded([response.body]);\n//     }\n// }\n\n// PhotosUploader.propTypes = {\n//     uploadedPhotos: PropTypes.array,\n//     onUpdateUploadedPhoto: PropTypes.func,\n//     onPhotosUploaded: PropTypes.func,\n// };\n\n// PhotosUploader.contextTypes = {\n//     cloudName: PropTypes.string,\n//     uploadPreset: PropTypes.string,\n// };\n\n// const PhotosUploaderContainer = connect(\n//     state => state,\n//     {\n//         onUpdateUploadedPhoto: updateUploadedPhoto,\n//         onPhotosUploaded: photosUploaded,\n//     }\n// )(PhotosUploader);\n\n// Object.assign(\n//     PhotosUploaderContainer.contextTypes,\n//     PhotosUploader.contextTypes\n// );\n\n// export default PhotosUploaderContainer;"]},"metadata":{},"sourceType":"module"}